---
layout: post
title: c与ｃ++中的几种运算符
date: 2018-09-02 10:07:24.000000000 +09:00
img:  grassland2.jpg # Add image post (optional)
tag: [c与c++]
---

ｃ与c++中的运算符种类繁多，虽然大多数都很简单，且用法明确。但是也有很多需要注意的地方。很早之前我就想将其中的一些注意点写下来了，但是总觉得每个点都很小，写一篇博客似乎篇幅太小了。今天一合计，不如就写一个关于运算符的合集吧。这篇博客里不会写的很详细，但是都是一些容易让人困惑的点。

# i++ 与++i
1. `i++`: 首先将ｉ的值进行拷贝，然后将ｉ值加１，最后返回拷贝；

2. `++i`: 首先将ｉ值加１，然后返回ｉ值；

>　由上述描述，我们会发现`i++`与`++i`相比，除了返回值不同外，似乎还多进行了一个拷贝的操作，所以是否`++i`的运行效率要高一些呢？答案是：是也不是。首先，在标准库里，编译器都会对这个额外的操作进行优化，因此二者其实性能一致。但是对于一些相对复杂的迭代器模型等还有用户自己重载的前置与后置的递增递减运算符，确实是有性能差距的，所以这种操作多了以后，性能差距就明显了。此处推荐尽量使用前置版本的递增递减运算符。 

# 移位运算符
首先讲一下移位运算符。分别是`>>（右移运算符）`与`<<（左移运算符）`。
1. 首先需要说明的是如果移位运算符的操作对象是位数比较小的整形，比如说`unsigned char`，在进行移位操作前，会先将其提升为整形（寄存器的位数，一般３２位）。最后，表达式返回的也是一个整形（３２位）的值。

2. 移位运算符的操作对象为无符号数时，程序是可移植的。此时无论右移还是左移都是补零。

3. 移位运算符的操作对象为有符号数时，此时程序是不可移植的。在不同的机器上有可能会出现不同的结果，其中有的机器上使用的是`逻辑移位`，也就是不考虑符号位，移位时另一边直接补零。还有一种是`算数移位`，此时考虑符号位，比如说右移时左边会补与符号位相同的值。（尽量保持只对无符号数进行移位操作）

4. 移位运算符（包括重载的ＩＯ运算符），满足左结合律，且本身优先级不高不低。比算数运算符低，但比关系运算符、赋值运算符还有条件运算符优先级高。

# 运算符的求值顺序
我们都知道运算符有优先级、结合律还有求值顺序。这三者共同决定代码的确切执行。但是其中优先级与结合律都是比较清晰地，但是求值顺序这个属性一直不是很清晰。其实这是有原因的，很多运算符求值顺序都没有明确规定，据统计，明确规定了求值顺序的运算符只有４种运算符。
1. `逻辑与(&&)`：满足**短路求值**。`a && b`首先判断a是否为`true`，只有在a为`true`的前提下才会对b进行求值，否则直接返回`false`;

2. `逻辑或(||)`：满足**短路求值**。`a || b`首先判断a是否为`false`，只有在a为`false`的前提下才会对b进行求值，否则直接返回`true`；

3. `条件(?:)运算符`：比如`a? c:d`首先对ａ进行求值，当ａ为`true`时，接下来对ｃ进行求值；当ａ为`false`时，接下来对ｄ进行求值；

4. `逗号运算符(,)`：比如`a=0,b=1;`首先对左侧表达式(a=0)进行求值，然后将求值结果(0)丢弃，对右侧表达式（ｂ=1）进行求值，并返回右侧表达式的求值结果（１）；

# 除法操作符（/）与取余操作符（％）
> 如果ｍ与ｎ是整数，并且ｎ非０,则表达式`(m/n)*n+m%n`的结果与ｍ相等。

### 表达式`m/n`
1. 参与运算的ｍ与ｎ可以是任意实数，但ｎ非０；
2. 整数相除时所得结果还是整数，也就是说，若商中含有小数部分，直接丢弃，即向０取整。

### 表达式`m%n`
1. 参与运算的ｍ与ｎ**一定得是整数**，且ｎ不能等于０；
2. 如果`m%n`的结果不为０，则其符号与ｍ相同，与ｎ无关，即`m%(-n)等于m%n，(-m)%n等于-(m%n)`（此例中ｍ与ｎ都为正整数）；


