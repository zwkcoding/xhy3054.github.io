---
layout: post
title: 命令行调试工具gdb小结
date: 2018-10-01 10:07:24.000000000 +09:00
img:  cartoon3.jpg # Add image post (optional)
tag: [tools]
---

一个合格的程序猿，肯定熟练掌握一种或者几种编程语言。而要想熟练掌握ｃ与c++语言，gdb这个工具是一定得了解的。额，不过我写它主要是给自己一个快速查看的链接，等到我把这些背下来就没什么价值了。这里只会写最常用最简单的功能，如果想要了解更多，可以查看**gdb技术手册**。

# gdb
GDB是一个由GNU开源组织发布的、UNIX/LINUX操作系统下的、基于命令行的、功能强大的程序调试工具。gdb的功能及其强大，命令也十分的多，但是对于普通的绝大部分的工作来说，懂得这其中最常用这些便可以了。下面记录，专为查阅准备。其次如果想对代码进行调试，一定记得在编译源文件时得将源代码调试信息写入可执行文件，这个在用gcc或g++时使用`-g`参数完成这一步操作。

## 1. 必要命令行使用方法
### 1.1 进入gdb

例子：
```bash
g++ -g test.cpp -o test
gdb test
```
　　

> 在调试`test`时，`test.cpp`源文件一定得在当前目录下，否则执行`list`命令时会找不到源码。

### 1.2 gdb常用命令

- `r`:  Run的简写，运行被调试的程序。如果此前没有下过断点，则执行完整个程序；如果有断点，则程序暂停在第一个可用断点处。

- `c`:  Continue的简写，继续执行被调试程序，直至下一个断点或程序结束。

- `b`:  Breakpoint的简写，设置断点。可以使用**“行号”“函数名称”“代码地址”**等方式指定断点位置。其中在函数名称前面加“*”符号表示将断点设置在“由编译器生成的prolog代码处”。如果不了解汇编，可以不予理会此用法。

- `d`: 　Delete breakpoint的简写，删除指定编号的某个断点，或删除所有断点。断点编号从1开始递增。如：`d 1`。

- `s`:  step的简写，执行一行源程序代码，如果此行代码中有函数调用，则进入该函数；相当于其它调试器中的“Step Into (单步跟踪进入)”；

- `n`:  next的简写，执行一行源程序代码，此行代码中的函数调用也一并执行。相当于其它调试器中的“Step Over (单步跟踪)”。

- `si/ni`:  si命令类似于s命令，ni命令类似于n命令。所不同的是，这两个命令（si/ni）所针对的是汇编指令，而s/n针对的是源代码。

- `p <变量名称>`:  Print的简写，显示指定变量（临时变量或全局变量）的值。

- `backtrace（或bt）`:  查看各级函数调用及参数。

- `finish` :  连续运行到当前函数返回为止，然后停下来等待命令。

- `list（或l）` :  列出源代码，接着上次的位置往下列，每次列10行。

- `list 函数名` :  列出某个函数的源代码。

- `start` :  开始执行程序，停在main函数第一行语句前面等待命令。

- `set var` :  修改变量的值。

- `clear` :  删除程序中所有的断点，`clear 行号`删除此行中的断点，`clear 函数名`删除该函数的断点。

- `display`: 设置程序中断后欲显示的数据及其格式。例如，如果希望每次程序中断后可以看到即将被执行的下一条汇编指令，可以使用命令`display /i $pc`其中`$pc`代表当前汇编指令，`/i`表示以十六进行显示。当需要关心汇编代码时，此命令相当有用。

- `undisplay <编号>`: 取消先前的display设置，编号从1开始递增。如`undisplay 1`

- `i`:  Info的简写，locals 查看当前栈帧局部变量的值详情请查阅“help i”。

- `q`:  Quit的简写，退出GDB调试环境。

- `help [命令名称]`:  GDB帮助命令，提供对GDB名种命令的解释说明。如果指定了“命令名称”参数，则显示该命令的详细说明；如果没有指定参数，则分类显示所有GDB命令，供用户进一步浏览和查询。

### 1.3 设置观察点
 观察点一般来观察某个表达式（变量也是一种表达式）的值是否有变化了，如果有变化，马上停住程序。

### 1.4 设置捕捉点
你可设置捕捉点来补捉程序运行时的一些事件。如：载入共享库（动态链接库）或是C++抛出的某种异常等。

## 2. 调试多线程

## 3. 调试内核



