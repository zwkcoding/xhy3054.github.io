---
layout: post
title: c++的引用使用中需要注意的几个问题
date: 2018-10-09 10:07:24.000000000 +09:00
img:  cartoon1.jpg # Add image post (optional)
tag: [c与c++]
---
在c++中，为了改变c语言中指针使用的种种麻烦与困难，定义了一种新的复合类型－－－引用。

## 普通引用
引用为对象起了另外一个名字，引用类型引用（refers to）另外一种类型。通过将声明符写成`&d`的形式来定义引用类型，其中d是声明的变量名。如下：

```cpp
int i1 = 1024;
int &r1 = i1;	//r1是i1的引用（也就是i1的别名）
int &r2;	//错误！引用必须初始化，引用是无法复制的，因为对引用赋值其实是对引用绑定的变量赋值。
int &r3 = 1024;	//错误！普通引用不能绑定常量
```

如下是几个注意问题：
1. 引用**必须初始化**！因为引用是无法赋值的，对引用赋值其实是对引用绑定的变量赋值。

2. 普通引用（非常量引用）是**不能绑定常量**的！因为可以使用引用对绑定的变量进行赋值，所以如果引用绑定了常量，就会有改变常量的操作发生的可能。

3. **不能定义引用的引用**。因为引用本身只是一个别名，不是一个对象，所以不能定义引用的引用。

4. 引用的**类型必须与绑定的对象严格匹配**。

5. 引用只能绑定在对象上，**不能与字面值或者某个表达式的计算结果绑定**。

## 常量引用
> 科普一下，const可以分为顶层const与底层const两种。一般对象只会有顶层const，表示对象本身是常量不能修改；而对于指针与引用变量除了顶层const外（表示自身是常量，一般只对指针而言，引用一般只关心底层const），还有底层const，表示自身指向或者引用的对象是常量。

此处常量引用指的是底层const，即不能通过此引用改变绑定的对象。常量引用有几个特殊的地方：

1. 常量引用可以**绑定常量，也可以绑定非常量**（但是不能通过此引用改变这个非常量的值）；

2. 常量引用的**类型不必与绑定的对象严格一致**，只要可以转换成常量引用的类型即可；

3. 常量引用**可与字面值或者某个表达式的计算结果绑定**；

其中第一条很容易理解，第二条、第三条的原因可由下面例子知道原因：
```cpp
double d1 = 3.14;
const int &r1 = d1;	//正确！
//上式等价于如下：
const int temp = d1;	//先生成一个临时变量（与常量引用类型一致）
const int &r1 = temp;	//让r1绑定这个临时量
```
当所要绑定的对象与常量引用类型不一样时，编译器便会创建一个临时变量，并将原变量转换类型赋值给这个临时变量，常量引用最终绑定的是这个临时变量。当绑定对象是某个表达式时执行操作一样。注意！这种操作只在必要时发生，如果绑定的是一个类型相符的变量，则直接进行绑定操作，不会有什么临时变量。



