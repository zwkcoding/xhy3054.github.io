---
layout: post
title: "c语言中的变长数组"
date: 2018-08-29 10:07:24.000000000 +09:00
img:  lavender3.jpg # Add image post (optional)
tag: [c与c++]
---

编程确实是需要在实践中提高，这段时间一直在学习ｃ++，同时刷刷leetcode。遇到了很多问题，也搞清楚了很多原本模糊不清的概念，今天主要写一下ｃ语言中的变长数组与零长数组。尤其是其中的变长数组，可是困扰了我一段时间了。

# c语言中的变长数组
想必很多学习c++的人都会在书上看到，数组在初始化时一定得确定维度，也就是说定义数组时，维度一定要用常量。但是在编程中很多人肯定发现了，如下程序也能正常运行：
```cpp
#include<iostream>
using namespace;
int main(){
	int size;
	cin>>size;
	int data[size];
	for (int i=0; i<size; i++)
		cin>>data[i];
	return 0;
}
```
这是怎么回事？难道以前我学的是错的吗？当然不是。这个问题需要仔细说明一下。

在ｃ++的标准中确实规定了：定义数组时，元素个数必须确定，因此维度一定要用常量。上面的程序之所以能编译运行成功，是因为**c++11对c99的编译器扩展**。

> c99中引入了变长数组的概念，在[ｃ99的技术手册](https://gcc.gnu.org/onlinedocs/gcc/Variable-Length.html)中说明了数组的长度可以为变量的，称为变长数组（VLA，variable length array）。（注：这里的变长指的是数组的长度是在运行时才能决定，但一旦决定在数组的生命周期内就不会再变。）

> 在 GCC 标准规范的 6.19 Arrays of Variable Length 中指出，作为编译器扩展，GCC 在 C90 模式和 C++ 编译器下遵守 ISO C99 关于变长数组的规范。

变长数组肯定是有好处的，它可以实现与`alloca`一样的效果，在栈上进行动态的空间分配，并且在函数返回时自动释放内存，无需手动释放。但是记住，**这个是c99的标准，不是c++的**，也就是说有的ｃ++编译器上并不支持。而且**谷歌的c++编程规范**中说:

![c++]({{site.baseurl}}/assets/img/array_length/googlecpp.png)


> 注意：其实变长数组与`alloca()`函数，这两种在栈空间上进行动态的内存分配本身是很酷的一件事，这部分内存函数返回时自动释放，而且运行效率很高。但是目前并未得到广泛引用，而且在很多平台上没有得到支持，因此可移植性很差。因此，不推荐在一些项目开发中使用，平时刷刷leetcode时使用倒是无伤大雅。



