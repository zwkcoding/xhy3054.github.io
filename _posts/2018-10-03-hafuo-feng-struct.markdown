---
layout: post
title: 哈佛体系结构与冯诺依曼体系结构的区别
date: 2018-10-03 10:07:24.000000000 +09:00
img:  village.jpg # Add image post (optional)
tag: [计算机基础]
---

MCS-51单片机有着嵌入式处理器经典的体系结构，这种体系结构在当前嵌入式处理器的高端ARM系列上仍然在延续，这就是哈佛结构。相对于大名鼎鼎的冯·诺依曼结构，哈佛结构的知名度显然逊色许多，但在嵌入式应用领域，哈佛结构却拥有着绝对的优势。哈佛结构与冯·诺依曼结构的最大区别在于**冯·诺依曼结构的计算机采用代码与数据的统一编址，而哈佛结构是独立编址的，代码空间与数据空间完全分开**。

在**通用计算机系统**中，应用软件的多样性使得计算机要不断地变化所执行的代码的内容，并且频繁地对数据与代码占有的存储器进行重新分配，这种情况下，**冯·诺依曼结构占有绝对优势，因为统一编址可以最大限度地利用资源**，而哈佛结构的计算机若应用于这种情形下则会对存储器资源产生理论上最大可达50%的浪费，这显然是不合理的。

但是在嵌入式应用中，系统要执行的任务相对单一，程序一般是固化在硬件里。当然这时使用冯·诺依曼结构也完全可以，代码区和数据区在编译时一次性分配好了而已，但是其灵活性得不到体现，所以除了如英特尔公司的8086，英特尔公司的其他中央处理器，现在大量的单片机也还在沿用冯·诺依曼结构，ARM公司的ARM7、MIPS公司的MIPS处理器、TI的MSP430系列、Freescale的HCS08系列等。

那是为什么说哈佛结构有优势呢？嵌入式计算机在工作时与通用计算机有着一些区别：嵌入式计算机在工作期间的绝大部分时间是无人值守的，而通用计算机工作期间一般是有人操作的；嵌入式计算机的故障可能会导致灾难性的后果，而通用计算机一般就是死死机，重新启动即可。这两点决定了对嵌入式计算机的一个基本要求：**可靠性**。

使用冯·诺依曼结构的计算机，程序空间不封闭，期程序空间的数据在运行期理论上可以被修改，此外程序一旦跑飞也有可能运行到数据区。虽然都是一些不常见的特殊情况下，但是看看哈佛结构德计算机在这些情况下是怎样的：基于哈佛结构的处理器入MCS-51，不需要可以对代码段进行写操作的指令，所以不会有代码区被改写的问题；程序只能在封闭的代码区中运行，不可能跑到数据区，这也是跑飞的几率减少并且跑飞后的行为有规律（数据区的数据是不断变化的而代码区是不变的）。Microchip公司的PIC系列芯片，还有摩托罗拉公司的MC68系列、Zilog公司的Z8系列、ATMEL公司的AVR系列和ARM公司的ARM9、ARM10和ARM11，51单片机也属于哈佛结构

所以，**相对于冯·诺依曼结构，哈佛结构更加适合于那些程序固化、任务相对简单的控制系统**。

# 总结
冯.诺依曼指出：程序只是一种（特殊）的数据，它可以像数据一样被处理，因此可以和数据一起被存储在同一个存储器中——这就是著名的**冯.诺依曼原理**。注意:**数据总线和地址总线共用。**

哈佛结构:

哈佛结构是一种**并行**体系结构，它的主要特点是将程序和数据存储在不同的存储空间中，即程序存储器和数据存储器是两个独立的存储器，每个存储器独立编址、独立访问。与两个存储器相对应的是系统的**4条总线**：程序的数据总线与地址总线，数据的数据总线与地址总线。这种分离的程序总线和数据总线**允许在一个机器周期内同时获得指令字（来自程序存储器）和操作数（来自数据存储器）**，从而提高了执行速度，使数据的吞吐率提高了1倍。又由于程序和数据存储器在两个分开的物理空间中，因此取指和执行能完全重叠。CPU首先到程序指令存储器中读取程序指令内容，解码后得到数据地址，再到相应的数据存储器中读取数据，并进行下一步的操作（通常是执行）。

[参考来源](https://www.cnblogs.com/li-hao/archive/2011/12/21/2296010.html)

