I"{<h3 id="whats-anaconda">what’s Anaconda</h3>

<p><strong>Anaconda</strong>,是用于python编程环境管理的一个工具。它让你可以为每一个项目单独的构建自己的python编程环境，因此很好的解决了不同项目之间的串扰问题。并且使得你的工作更加清晰有条理。</p>

<h3 id="install-anaconda">install Anaconda</h3>
<p>从<a href="https://www.anaconda.com/download/">官网</a>下载安装文件，在linux下是一个类似<code class="highlighter-rouge">Anaconda2-5.1.0-Linux-x86_64.sh</code>文件，安装只需运行</p>
<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nv">$ </span>bash Anaconda2-5.1.0-Linux-x86_64.sh 
</code></pre></div></div>

<h3 id="anaconda启用与停用">Anaconda启用与停用</h3>
<p>安装的过程中会有两次让你确认的交互，第一次是让你同意他的协议，输入yes即可；第二次是问你是否将anaconda/bin添加到环境变量中，一般来说点击yes是没问题的，这样安装完，就直接和你的python3命令绑定了。如果这一步输入了no，相当于默认没有启动anaconda,需要去环境变量中添加，方法如下：</p>

<ol>
  <li>
    <p>打开终端并输入<code class="highlighter-rouge">gedit ~/.bashrc</code></p>
  </li>
  <li>
    <p>在<code class="highlighter-rouge">.bashrc</code>文件末尾输入<code class="highlighter-rouge">export PATH=/home/xhy/anaconda3/bin:$PATH </code>,路径换为<strong>自己的</strong>，然后保存。</p>
  </li>
  <li>
    <p>终端输入<code class="highlighter-rouge">source~/.bashrc</code>，使得立即生效。</p>
  </li>
</ol>

<p>若想停用anaconda，方法如下：</p>

<ol>
  <li>
    <p>打开终端并输入<code class="highlighter-rouge">gedit ~/.bashrc</code></p>
  </li>
  <li>
    <p>找到刚才添加的那行路径注释掉</p>
  </li>
  <li>
    <p>终端输入<code class="highlighter-rouge">source~/.bashrc</code>，使得立即生效。</p>
  </li>
  <li>
    <p>重开一终端即可看到效果。</p>
  </li>
</ol>

<h3 id="使用anaconda">使用Anaconda</h3>

<p>列出已有的环境</p>
<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nv">$ </span>conda <span class="nb">env </span>list
</code></pre></div></div>

<p>基于<strong>python2</strong>创建一个名为<strong>tensorflow</strong>的环境</p>
<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nv">$ </span>conda create <span class="nt">-n</span> tensorflow <span class="nv">python</span><span class="o">=</span>2 
</code></pre></div></div>

<p>进入环境<strong>tensorflow</strong>（source可用conda替换）</p>
<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nv">$ </span><span class="nb">source </span>activate tensorflow
</code></pre></div></div>

<p>列出此<strong>python</strong>环境下已有的包</p>
<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nv">$ </span>conda list
<span class="c">#或者 </span>
<span class="nv">$ </span>pip list
</code></pre></div></div>

<p>查询某一个包(比如numpy)的版本信息</p>
<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nv">$ </span>conda search numpy
</code></pre></div></div>

<p>此<strong>python</strong>环境下安装<strong>tensorflow</strong>（其他包类似）（也可以用<strong>pip</strong>安装）</p>
<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nv">$ </span>conda <span class="nb">install </span>tensorflow 
<span class="c">#也可以pip管理</span>
<span class="nv">$ </span>pip <span class="nb">install </span>tensorflow
</code></pre></div></div>

<p>卸载包</p>
<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nv">$ </span>conda remove tensorflow
<span class="c">#如果pip管理</span>
<span class="nv">$ </span>pip uninstall tensorflow
</code></pre></div></div>

<p>离开<strong>tensorflow</strong>环境（source可用conda替换）</p>
<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nv">$ </span><span class="nb">source </span>deactivate
</code></pre></div></div>

<p>删除<strong>tensorflow</strong>环境</p>
<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nv">$ </span>conda <span class="nb">env </span>remove <span class="nt">-n</span> tensorflow
</code></pre></div></div>

<p>如果换了一台新电脑，想要将旧电脑上配置的这个<strong>tensorflow</strong>环境搬过去，先将此环境下的配置信息导出到一个<code class="highlighter-rouge">.yaml</code>文件中</p>
<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nv">$ </span>conda <span class="nb">env export</span> <span class="o">&gt;</span> ~/environment.yaml 
</code></pre></div></div>

<p>然后在新电脑上新建<strong>tensorflow</strong>环境，然后根据<code class="highlighter-rouge">.yaml</code>文件更新环境</p>
<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nv">$ </span>conda <span class="nb">env </span>update <span class="nt">-f</span> /path/to/environment.yml 
</code></pre></div></div>

<h3 id="anaconda的小毛病">anaconda的小毛病</h3>
<ul>
  <li>
    <p>如果你用pip安装的包发现也装在了系统Python下，是因为使用了系统python的pip，指定路径就好了<code class="highlighter-rouge">/home/xhy/anaconda3/bin/pip install 包名 </code></p>
  </li>
  <li>
    <p>anaconda并不是完美的，虽然anaconda提供conda与pip方式在独立的env下安装Python包，但是我们知道有些包一般是用apt安装的。比如说pillow包是一个常用的Python图像处理包。但是一般安装这个包是用<code class="highlighter-rouge">sudo apt-get install python-imaging</code>命令安装。而apt安装的Python包默认安装在系统Python目录下，所以在anaconda的此env下的	Python并不能import到（当然你可以在import时指定路径我猜测），于是就很烦，查了一下原来这种情况也是可以安装的，虽然直接Pip和conda都找不到python-imaging包，但是可以用命令<code class="highlighter-rouge">conda install -c anaconda pillow </code>安装。（可以google下anaconda如何安装××包，前提你得知道包名）</p>
  </li>
</ul>

:ET